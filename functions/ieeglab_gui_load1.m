function [opt, wasCanceled] = ieeglab_gui_load1()
% ieeglab_gui_load1
%
% Open a small GUI to collect iEEG loading parameters.
% Cleanly aborts on Cancel or window close.
%
% Outputs
%   opt          struct with fields (empty [] when canceled):
%                  .sensor_type
%                  .dataset_path
%                  .elec_tsv
%                  .events_tsv
%   wasCanceled  logical, true if user canceled

wasCanceled = false;      % default

% Default folder for dataset chooser
plugin_path = fileparts(which('eegplugin_ieeglab'));
if isempty(plugin_path)
    plugin_path = pwd;
else
    plugin_path = fullfile(plugin_path, 'tutorial');
end

% Dropdown options
sensor_types = { ...
    'StereoElectroEncephaloGraphy (sEEG)' ...
    'ElectroCorticoGraphy (ECoG)' ...
};

% Callbacks
sensor_cb = [ ...
    'val=get(gcbo,''value'');' ...
    'if ~isempty(val);' ...
        'set(findobj(gcbf,''userdata'',''sensor_dependent''),''enable'',''on'');' ...
    'end;' ...
];

browse_dataset = [ ...
    'fprintf(''\nSelect an .nwb file or a .mefd folder containing the iEEG data you wish to analyze...\n'');' ...
    sprintf('[f,p] = uigetfile({''*.mefd;*.nwb;*.vhdr'',''Datasets (*.mefd, *.nwb, *.vhdr)''}, ''Select iEEG dataset'', ''%s'');', plugin_path) ...
    'if isequal(f,0), fprintf(''Canceled selecting iEEG data\n''); return; end;' ...
    'fullpath = fullfile(p,f);' ...
    'set(findobj(gcbf,''tag'',''dataset_path''), ''string'', fullpath);' ...
    'hFig = ancestor(gcbo,''figure''); try, figure(hFig); uistack(hFig,''top''); drawnow; end;' ...
];

browse_elec = [ ...
    'fprintf(''\nSelect the corresponding electrodes.tsv file now...\n'');' ...
    sprintf('[f,p] = uigetfile({''*.tsv'',''Electrode TSV (*.tsv)''}, ''Select electrode locations file'', ''%s'');', plugin_path) ...
    'if isequal(f,0), fprintf(''Canceled selecting electrode locations\n''); return; end;' ...
    'fullpath = fullfile(p,f);' ...
    'set(findobj(gcbf,''tag'',''elec_tsv''), ''string'', fullpath);' ...
    'hFig = ancestor(gcbo,''figure''); try, figure(hFig); uistack(hFig,''top''); drawnow; end;' ...
];

browse_events = [ ...
    'fprintf(''\nSelect the corresponding events.tsv file now...\n'');' ...
    sprintf('[f,p] = uigetfile({''*.tsv'',''Events TSV (*.tsv)''}, ''Select events file'', ''%s'');', plugin_path) ...
    'if isequal(f,0), fprintf(''Canceled selecting events\n''); return; end;' ...
    'fullpath = fullfile(p,f);' ...
    'set(findobj(gcbf,''tag'',''events_tsv''), ''string'', fullpath);' ...
    'hFig = ancestor(gcbo,''figure''); try, figure(hFig); uistack(hFig,''top''); drawnow; end;' ...
];

% GUI design
uilist = {
    {'style' 'text'  'string' 'Sensor type:'   'fontweight' 'bold'} ...
    {'style' 'popupmenu' 'string' sensor_types 'tag' 'sensor' 'callback' @sensor_popup_cb} ...
    {} ...
    {'style' 'text'  'string' 'iEEG data file (.nwb) or folder (.mefd):' 'fontweight' 'bold'} ...
    {'style' 'edit'  'string' '' 'tag' 'dataset_path' 'enable' 'inactive' 'horizontalalignment' 'left'} ...
    {'style' 'pushbutton' 'string' 'Browse…' 'callback' browse_dataset } ...
    {} ...
    {'style' 'text'  'string' 'Electrode locations file (.tsv):' 'fontweight' 'bold'} ...
    {'style' 'edit'  'string' '' 'tag' 'elec_tsv' 'enable' 'inactive' 'horizontalalignment' 'left'} ...
    {'style' 'pushbutton' 'string' 'Browse…' 'callback' browse_elec } ...
    {} ...
    {'style' 'text'  'string' 'Events file (.tsv):' 'fontweight' 'bold'} ...
    {'style' 'edit'  'string' '' 'tag' 'events_tsv' 'enable' 'inactive' 'horizontalalignment' 'left' 'userdata' 'analysis'} ...
    {'style' 'pushbutton' 'string' 'Browse…' 'callback' browse_events} ...
};

% Geometry
uigeom = {
    [.3 .7] ...
    1 ...
    [.45 .4 .22] ...
    1 ...
    [.45 .4 .22] ...
    1 ...
    [.45 .4 .22] ...
};

% Launch GUI
[res, ~, ~, outstruct] = inputgui(uigeom, uilist, 'pophelp(''ieeglab_load'')', 'iEEGLAB plugin  Loading data');

% Clean abort on Cancel or window close
if isempty(res) || isempty(outstruct)
    fprintf('iEEGLAB load dialog canceled\n');
    wasCanceled = true;   % mark canceled
    opt = [];
    return;
end

% Map results from uilist controls that produce values
% Order of controls that return values:
%   1) popupmenu sensor
%   2) edit dataset_path
%   3) edit elec_tsv
%   4) edit events_tsv
sensor_idx         = res{1};
dataset_path_value = res{2};
elec_tsv_value     = res{3};
events_tsv_value   = res{4};

% Build params
params.sensor_type = sensor_types{sensor_idx};
params.dataset_path = char(dataset_path_value);
params.elec_tsv     = char(elec_tsv_value);
params.events_tsv   = char(events_tsv_value);

% Validators
is_nwb  = @(p) ~isempty(p) && endsWith(lower(p), '.nwb');
is_mefd = @(p) ~isempty(p) && (endsWith(lower(p), '.mefd') || isfolder(p));
is_vhdr = @(p) ~isempty(p) && endsWith(lower(p), '.vhdr');

if isempty(params.dataset_path) || ~(is_nwb(params.dataset_path) || is_mefd(params.dataset_path) || is_vhdr(params.dataset_path))
    warning('Dataset path is empty or not .nwb/.mefd/.vhdr: %s', params.dataset_path);
end
if ~isempty(params.elec_tsv) && ~endsWith(lower(params.elec_tsv), '.tsv')
    warning('Electrode file does not have .tsv extension: %s', params.elec_tsv);
end
if ~isempty(params.events_tsv) && ~endsWith(lower(params.events_tsv), '.tsv')
    warning('Events file does not have .tsv extension: %s', params.events_tsv);
end

fprintf('\nSelected parameters\n');
disp(params);

opt = params;
end


%% helper
function sensor_popup_cb(src, ~)
    val = get(src,'value');
    if ~isempty(val)
        h = findobj(gcbf,'userdata','sensor_dependent');
        if ~isempty(h), set(h,'enable','on'); end
    end
end